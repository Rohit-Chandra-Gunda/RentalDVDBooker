// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: dvd_bookings.proto

package protobuffs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DvdBookings_GetDvdBookings_FullMethodName = "/protobuffs.DvdBookings/GetDvdBookings"
)

// DvdBookingsClient is the client API for DvdBookings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DvdBookingsClient interface {
	GetDvdBookings(ctx context.Context, in *DvdBookingsRequest, opts ...grpc.CallOption) (*DvdBookingsResponse, error)
}

type dvdBookingsClient struct {
	cc grpc.ClientConnInterface
}

func NewDvdBookingsClient(cc grpc.ClientConnInterface) DvdBookingsClient {
	return &dvdBookingsClient{cc}
}

func (c *dvdBookingsClient) GetDvdBookings(ctx context.Context, in *DvdBookingsRequest, opts ...grpc.CallOption) (*DvdBookingsResponse, error) {
	out := new(DvdBookingsResponse)
	err := c.cc.Invoke(ctx, DvdBookings_GetDvdBookings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DvdBookingsServer is the server API for DvdBookings service.
// All implementations should embed UnimplementedDvdBookingsServer
// for forward compatibility
type DvdBookingsServer interface {
	GetDvdBookings(context.Context, *DvdBookingsRequest) (*DvdBookingsResponse, error)
}

// UnimplementedDvdBookingsServer should be embedded to have forward compatible implementations.
type UnimplementedDvdBookingsServer struct {
}

func (UnimplementedDvdBookingsServer) GetDvdBookings(context.Context, *DvdBookingsRequest) (*DvdBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDvdBookings not implemented")
}

// UnsafeDvdBookingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DvdBookingsServer will
// result in compilation errors.
type UnsafeDvdBookingsServer interface {
	mustEmbedUnimplementedDvdBookingsServer()
}

func RegisterDvdBookingsServer(s grpc.ServiceRegistrar, srv DvdBookingsServer) {
	s.RegisterService(&DvdBookings_ServiceDesc, srv)
}

func _DvdBookings_GetDvdBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DvdBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DvdBookingsServer).GetDvdBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DvdBookings_GetDvdBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DvdBookingsServer).GetDvdBookings(ctx, req.(*DvdBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DvdBookings_ServiceDesc is the grpc.ServiceDesc for DvdBookings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DvdBookings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuffs.DvdBookings",
	HandlerType: (*DvdBookingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDvdBookings",
			Handler:    _DvdBookings_GetDvdBookings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dvd_bookings.proto",
}
